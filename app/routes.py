from fastapi import APIRouter, UploadFile, File, HTTPException
from app.services.image_utils import image_to_base64
from app.services.openai_client import analyze_image_base64
from app.logger import logger
from pathlib import Path
import uuid

router = APIRouter()

@router.post("/analyze/")
async def analyze_image(image: UploadFile = File(...)):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        ext = Path(image.filename).suffix or ".jpg"
        tmp_dir = Path("tmp")
        tmp_dir.mkdir(parents=True, exist_ok=True)
        file_path = tmp_dir / f"{uuid.uuid4().hex}{ext}"

        with open(file_path, "wb") as f:
            f.write(await image.read())

        logger.info(f"üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_path.name}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64
        image_b64 = image_to_base64(str(file_path))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenAI
        result = analyze_image_base64(image_b64)

        logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç GPT –ø–æ–ª—É—á–µ–Ω")

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_path.unlink(missing_ok=True)

        if not isinstance(result, dict):
            raise ValueError("–û–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å –æ—Ç OpenAI")

        return {"data": result, "error": None}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
