# app/models/qwen_detector.py

import io, json
from pathlib import Path
from PIL import Image
import torch
from transformers import AutoProcessor, AutoModelForConditionalGeneration

class QwenFoodDetector:
    def __init__(self, model_dir: str):
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        # 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–º–µ–Ω–Ω–æ Qwen-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π Processor
        self.processor = AutoProcessor.from_pretrained(
            model_dir,
            trust_remote_code=True,   # –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ!
            use_fast=True
        )
        # 2Ô∏è‚É£ –ú–æ–¥–µ–ª—å –≥—Ä—É–∑–∏–º –ª–µ–Ω–∏–≤–æ –∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –ø–æ–¥ –±–æ–ª—å—à–æ–π –æ–±—ä—ë–º
        self.model = AutoModelForConditionalGeneration.from_pretrained(
            model_dir,
            trust_remote_code=True,
            device_map="auto",
            low_cpu_mem_usage=True,
            torch_dtype="auto"
        )
        self.model.eval()

    def detect(self, image_path: str) -> dict:
        # 3Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        img = Image.open(Path(image_path)).convert("RGB")

        # 4Ô∏è‚É£ –í–∞—à prompt ‚Äî –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å <image> —Ç–æ–∫–µ–Ω–æ–º,
        #    –æ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –≥–¥–µ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏!
        prompt = (
            "<image> Detect foods and drinks in this image "
            "and output a JSON list of {\"bbox\": [x1,y1,x2,y2], \"label\": \"...\"}"
        )

        # 5Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º inputs: –∑–¥–µ—Å—å processor —Å–∞–º —Å–æ–∑–¥–∞—Å—Ç input_ids –∏ pixel_values
        inputs = self.processor(
            images=img,
            text=prompt,
            return_tensors="pt"
        ).to(self.device)

        # üîç –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
        # print("input_ids:", inputs.input_ids.shape, "pixel_values:", inputs.pixel_values.shape)

        # 6Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏–º –æ—Ç–≤–µ—Ç
        outputs = self.model.generate(
            **inputs,
            max_new_tokens=512,
            do_sample=False
        )

        # 7Ô∏è‚É£ –î–µ–∫–æ–¥–∏–º –∏ –ø–∞—Ä—Å–∏–º JSON
        raw = self.processor.decode(outputs[0], skip_special_tokens=True)
        try:
            detections = json.loads(raw)
        except json.JSONDecodeError:
            detections = [{"error": raw}]
        return {"ingredients": detections}
